
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser_statpy;

import java_cup.runtime.*;
import Objects.SymbolData;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\011\000\002\015" +
    "\004\000\002\015\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\004" +
    "\011\000\002\010\005\000\002\010\007\000\002\010\006" +
    "\000\002\012\014\000\002\024\004\000\002\024\003\000" +
    "\002\037\006\000\002\011\011\000\002\011\015\000\002" +
    "\011\012\000\002\011\016\000\002\023\004\000\002\023" +
    "\003\000\002\036\011\000\002\013\024\000\002\013\024" +
    "\000\002\014\011\000\002\025\014\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\004\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\005\011\000\002\016\004\000\002\016\003\000" +
    "\002\027\007\000\002\027\007\000\002\027\016\000\002" +
    "\027\016\000\002\007\011\000\002\022\004\000\002\022" +
    "\003\000\002\034\007\000\002\034\013\000\002\034\013" +
    "\000\002\006\011\000\002\017\004\000\002\017\003\000" +
    "\002\030\007\000\002\030\013\000\002\030\013\000\002" +
    "\030\007\000\002\030\007\000\002\033\003\000\002\033" +
    "\003\000\002\033\012\000\002\020\005\000\002\020\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\012\000" +
    "\002\021\005\000\002\021\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\044\010\001\002\000\004\045\011\001\002\000" +
    "\004\051\012\001\002\000\034\004\031\007\021\010\036" +
    "\012\041\027\025\030\042\031\026\032\037\035\013\040" +
    "\035\041\014\043\015\074\024\001\002\000\004\044\u0124" +
    "\001\002\000\004\044\u0109\001\002\000\004\044\u0103\001" +
    "\002\000\036\004\031\007\021\010\036\012\041\027\025" +
    "\030\042\031\026\032\037\035\013\040\035\041\014\043" +
    "\015\052\u0102\074\024\001\002\000\042\004\ufffa\007\ufffa" +
    "\010\ufffa\012\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\052\ufffa" +
    "\074\ufffa\001\002\000\004\074\375\001\002\000\004\074" +
    "\uffdf\001\002\000\042\004\ufff4\007\ufff4\010\ufff4\012\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\043\ufff4\052\ufff4\074\ufff4\001\002" +
    "\000\042\004\ufffe\007\ufffe\010\ufffe\012\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\043\ufffe\052\ufffe\074\ufffe\001\002\000\004\053" +
    "\372\001\002\000\004\074\uffde\001\002\000\004\074\uffdc" +
    "\001\002\000\042\004\ufff7\007\ufff7\010\ufff7\012\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\043\ufff7\052\ufff7\074\ufff7\001\002\000" +
    "\042\004\ufffc\007\ufffc\010\ufffc\012\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\043\ufffc\052\ufffc\074\ufffc\001\002\000\010\006\157" +
    "\014\160\016\156\001\002\000\042\004\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043\ufff8\052\ufff8\074" +
    "\ufff8\001\002\000\042\004\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\043\ufff5\052\ufff5\074\ufff5\001\002" +
    "\000\044\004\ufff9\007\ufff9\010\ufff9\012\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\145\043\ufff9\052\ufff9\074\ufff9\001\002\000" +
    "\004\054\144\001\002\000\004\074\uffdd\001\002\000\004" +
    "\044\113\001\002\000\042\004\ufffd\007\ufffd\010\ufffd\012" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\043\ufffd\052\ufffd\074\ufffd\001" +
    "\002\000\004\046\045\001\002\000\004\074\uffdb\001\002" +
    "\000\042\004\ufff6\007\ufff6\010\ufff6\012\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\043\ufff6\052\ufff6\074\ufff6\001\002\000\042\004" +
    "\ufffb\007\ufffb\010\ufffb\012\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043" +
    "\ufffb\052\ufffb\074\ufffb\001\002\000\004\013\046\001\002" +
    "\000\004\044\047\001\002\000\020\023\051\024\052\055" +
    "\050\073\055\074\054\075\053\076\056\001\002\000\020" +
    "\023\051\024\052\055\050\073\055\074\054\075\053\076" +
    "\056\001\002\000\036\025\uffd6\026\uffd6\045\uffd6\054\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\001\002\000\036\025\uffd5" +
    "\026\uffd5\045\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5" +
    "\001\002\000\036\025\uffd9\026\uffd9\045\uffd9\054\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\001\002\000\036\025\uffd7\026" +
    "\uffd7\045\uffd7\054\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001" +
    "\002\000\036\025\uffda\026\uffda\045\uffda\054\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\uffda\001\002\000\036\025\uffd8\026\uffd8" +
    "\045\uffd8\054\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002" +
    "\000\034\025\067\026\074\045\073\056\064\057\071\060" +
    "\061\061\066\062\062\063\063\064\065\065\072\066\060" +
    "\067\070\001\002\000\020\023\051\024\052\055\050\073" +
    "\055\074\054\075\053\076\056\001\002\000\020\023\051" +
    "\024\052\055\050\073\055\074\054\075\053\076\056\001" +
    "\002\000\020\023\051\024\052\055\050\073\055\074\054" +
    "\075\053\076\056\001\002\000\020\023\051\024\052\055" +
    "\050\073\055\074\054\075\053\076\056\001\002\000\020" +
    "\023\051\024\052\055\050\073\055\074\054\075\053\076" +
    "\056\001\002\000\020\023\051\024\052\055\050\073\055" +
    "\074\054\075\053\076\056\001\002\000\020\023\051\024" +
    "\052\055\050\073\055\074\054\075\053\076\056\001\002" +
    "\000\020\023\051\024\052\055\050\073\055\074\054\075" +
    "\053\076\056\001\002\000\020\023\051\024\052\055\050" +
    "\073\055\074\054\075\053\076\056\001\002\000\020\023" +
    "\051\024\052\055\050\073\055\074\054\075\053\076\056" +
    "\001\002\000\020\023\051\024\052\055\050\073\055\074" +
    "\054\075\053\076\056\001\002\000\004\054\076\001\002" +
    "\000\020\023\051\024\052\055\050\073\055\074\054\075" +
    "\053\076\056\001\002\000\036\025\uffc8\026\uffc8\045\uffc8" +
    "\054\uffc8\056\064\057\071\060\061\061\066\062\062\063" +
    "\063\064\065\065\072\066\060\067\070\001\002\000\042" +
    "\004\ufff2\007\ufff2\010\ufff2\012\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\043\ufff2\052\ufff2\074\ufff2\001\002\000\036\025\uffcc\026" +
    "\uffcc\045\uffcc\054\uffcc\056\064\057\071\060\061\061\066" +
    "\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\001" +
    "\002\000\036\025\uffd2\026\uffd2\045\uffd2\054\uffd2\056\uffd2" +
    "\057\uffd2\060\061\061\066\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\001\002\000\036\025\uffca\026\uffca" +
    "\045\uffca\054\uffca\056\064\057\071\060\061\061\066\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\001\002" +
    "\000\036\025\uffc9\026\uffc9\045\uffc9\054\uffc9\056\064\057" +
    "\071\060\061\061\066\062\062\063\063\064\065\065\072" +
    "\066\060\067\070\001\002\000\036\025\uffd0\026\uffd0\045" +
    "\uffd0\054\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\001\002\000" +
    "\036\025\uffcd\026\uffcd\045\uffcd\054\uffcd\056\064\057\071" +
    "\060\061\061\066\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\001\002\000\036\025\uffd3\026\uffd3\045\uffd3" +
    "\054\uffd3\056\uffd3\057\uffd3\060\061\061\066\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\036" +
    "\025\uffce\026\uffce\045\uffce\054\uffce\056\064\057\071\060" +
    "\061\061\066\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\001\002\000\036\025\uffcf\026\uffcf\045\uffcf\054" +
    "\uffcf\056\064\057\071\060\061\061\066\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002\000\036\025" +
    "\uffd1\026\uffd1\045\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\001\002\000\036\025\uffcb\026\uffcb\045\uffcb\054\uffcb" +
    "\056\064\057\071\060\061\061\066\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\036\025\067" +
    "\026\074\045\uffd4\054\uffd4\056\064\057\071\060\061\061" +
    "\066\062\062\063\063\064\065\065\072\066\060\067\070" +
    "\001\002\000\020\023\051\024\052\055\050\073\055\074" +
    "\054\075\053\076\056\001\002\000\034\025\067\026\074" +
    "\045\115\056\064\057\071\060\061\061\066\062\062\063" +
    "\063\064\065\065\072\066\060\067\070\001\002\000\004" +
    "\051\116\001\002\000\034\004\031\007\021\010\036\012" +
    "\041\027\025\030\042\031\026\032\037\035\013\040\035" +
    "\041\014\043\015\074\024\001\002\000\036\004\031\007" +
    "\021\010\036\012\041\027\025\030\042\031\026\032\037" +
    "\035\013\040\035\041\014\043\015\052\121\074\024\001" +
    "\002\000\042\004\uffff\007\uffff\010\uffff\012\uffff\027\uffff" +
    "\030\uffff\031\uffff\032\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\043\uffff\052\uffff\074\uffff\001\002\000\046" +
    "\004\uffea\007\uffea\010\uffea\012\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\122\034\123\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\043\uffea\052\uffea\074\uffea\001\002\000" +
    "\004\051\141\001\002\000\004\044\133\001\002\000\046" +
    "\004\uffe8\007\uffe8\010\uffe8\012\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\126\034\123\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\043\uffe8\052\uffe8\074\uffe8\001\002\000" +
    "\046\004\uffe5\007\uffe5\010\uffe5\012\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\043\uffe5\052\uffe5\074\uffe5\001\002" +
    "\000\004\051\130\001\002\000\046\004\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\043" +
    "\uffe6\052\uffe6\074\uffe6\001\002\000\034\004\031\007\021" +
    "\010\036\012\041\027\025\030\042\031\026\032\037\035" +
    "\013\040\035\041\014\043\015\074\024\001\002\000\036" +
    "\004\031\007\021\010\036\012\041\027\025\030\042\031" +
    "\026\032\037\035\013\040\035\041\014\043\015\052\132" +
    "\074\024\001\002\000\042\004\uffe7\007\uffe7\010\uffe7\012" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\043\uffe7\052\uffe7\074\uffe7\001" +
    "\002\000\020\023\051\024\052\055\050\073\055\074\054" +
    "\075\053\076\056\001\002\000\034\025\067\026\074\045" +
    "\135\056\064\057\071\060\061\061\066\062\062\063\063" +
    "\064\065\065\072\066\060\067\070\001\002\000\004\051" +
    "\136\001\002\000\034\004\031\007\021\010\036\012\041" +
    "\027\025\030\042\031\026\032\037\035\013\040\035\041" +
    "\014\043\015\074\024\001\002\000\036\004\031\007\021" +
    "\010\036\012\041\027\025\030\042\031\026\032\037\035" +
    "\013\040\035\041\014\043\015\052\140\074\024\001\002" +
    "\000\046\004\uffe4\007\uffe4\010\uffe4\012\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\043\uffe4\052\uffe4\074\uffe4\001" +
    "\002\000\034\004\031\007\021\010\036\012\041\027\025" +
    "\030\042\031\026\032\037\035\013\040\035\041\014\043" +
    "\015\074\024\001\002\000\036\004\031\007\021\010\036" +
    "\012\041\027\025\030\042\031\026\032\037\035\013\040" +
    "\035\041\014\043\015\052\143\074\024\001\002\000\042" +
    "\004\uffe9\007\uffe9\010\uffe9\012\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\043\uffe9\052\uffe9\074\uffe9\001\002\000\042\004\ufff3\007" +
    "\ufff3\010\ufff3\012\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\052" +
    "\ufff3\074\ufff3\001\002\000\004\051\146\001\002\000\034" +
    "\004\031\007\021\010\036\012\041\027\025\030\042\031" +
    "\026\032\037\035\013\040\035\041\014\043\015\074\024" +
    "\001\002\000\036\004\031\007\021\010\036\012\041\027" +
    "\025\030\042\031\026\032\037\035\013\040\035\041\014" +
    "\043\015\052\150\074\024\001\002\000\004\043\151\001" +
    "\002\000\004\044\152\001\002\000\020\023\051\024\052" +
    "\055\050\073\055\074\054\075\053\076\056\001\002\000" +
    "\034\025\067\026\074\045\154\056\064\057\071\060\061" +
    "\061\066\062\062\063\063\064\065\065\072\066\060\067" +
    "\070\001\002\000\004\054\155\001\002\000\042\004\uffe0" +
    "\007\uffe0\010\uffe0\012\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\043\uffe0" +
    "\052\uffe0\074\uffe0\001\002\000\004\044\335\001\002\000" +
    "\004\044\272\001\002\000\004\044\161\001\002\000\004" +
    "\045\162\001\002\000\004\051\163\001\002\000\006\007" +
    "\166\010\165\001\002\000\010\007\166\010\165\052\270" +
    "\001\002\000\004\070\243\001\002\000\012\015\170\021" +
    "\173\022\172\070\171\001\002\000\010\007\uffb8\010\uffb8" +
    "\052\uffb8\001\002\000\004\053\240\001\002\000\004\071" +
    "\214\001\002\000\004\053\211\001\002\000\004\053\174" +
    "\001\002\000\010\050\176\073\200\074\177\001\002\000" +
    "\004\054\210\001\002\000\004\051\201\001\002\000\004" +
    "\054\uffb1\001\002\000\004\054\uffb2\001\002\000\004\011" +
    "\202\001\002\000\004\047\203\001\002\000\004\073\204" +
    "\001\002\000\004\047\205\001\002\000\004\073\206\001" +
    "\002\000\004\052\207\001\002\000\004\054\uffb0\001\002" +
    "\000\010\007\uffb4\010\uffb4\052\uffb4\001\002\000\010\050" +
    "\176\073\200\074\177\001\002\000\004\054\213\001\002" +
    "\000\010\007\uffb3\010\uffb3\052\uffb3\001\002\000\004\017" +
    "\215\001\002\000\004\053\216\001\002\000\004\051\217" +
    "\001\002\000\010\050\222\073\223\074\224\001\002\000" +
    "\006\047\uffae\052\uffae\001\002\000\006\047\234\052\235" +
    "\001\002\000\004\051\225\001\002\000\006\047\uffad\052" +
    "\uffad\001\002\000\006\047\uffac\052\uffac\001\002\000\004" +
    "\011\226\001\002\000\004\047\227\001\002\000\004\073" +
    "\230\001\002\000\004\047\231\001\002\000\004\073\232" +
    "\001\002\000\004\052\233\001\002\000\006\047\uffab\052" +
    "\uffab\001\002\000\010\050\222\073\223\074\224\001\002" +
    "\000\004\054\236\001\002\000\010\007\uffb6\010\uffb6\052" +
    "\uffb6\001\002\000\006\047\uffaf\052\uffaf\001\002\000\010" +
    "\050\176\073\200\074\177\001\002\000\004\054\242\001" +
    "\002\000\010\007\uffb7\010\uffb7\052\uffb7\001\002\000\004" +
    "\071\244\001\002\000\004\020\245\001\002\000\004\053" +
    "\246\001\002\000\004\051\247\001\002\000\010\050\251" +
    "\074\254\075\252\001\002\000\006\047\264\052\265\001" +
    "\002\000\004\051\255\001\002\000\006\047\uffa8\052\uffa8" +
    "\001\002\000\006\047\uffa9\052\uffa9\001\002\000\006\047" +
    "\uffa7\052\uffa7\001\002\000\004\011\256\001\002\000\004" +
    "\047\257\001\002\000\004\073\260\001\002\000\004\047" +
    "\261\001\002\000\004\073\262\001\002\000\004\052\263" +
    "\001\002\000\006\047\uffa6\052\uffa6\001\002\000\010\050" +
    "\251\074\254\075\252\001\002\000\004\054\266\001\002" +
    "\000\010\007\uffb5\010\uffb5\052\uffb5\001\002\000\006\047" +
    "\uffaa\052\uffaa\001\002\000\042\004\uffba\007\uffba\010\uffba" +
    "\012\uffba\027\uffba\030\uffba\031\uffba\032\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\043\uffba\052\uffba\074\uffba" +
    "\001\002\000\010\007\uffb9\010\uffb9\052\uffb9\001\002\000" +
    "\004\045\273\001\002\000\004\051\274\001\002\000\006" +
    "\007\300\010\276\001\002\000\010\007\300\010\276\052" +
    "\334\001\002\000\004\074\316\001\002\000\010\007\uffc5" +
    "\010\uffc5\052\uffc5\001\002\000\004\074\301\001\002\000" +
    "\004\053\302\001\002\000\006\050\303\073\304\001\002" +
    "\000\004\051\306\001\002\000\004\054\305\001\002\000" +
    "\010\007\uffc4\010\uffc4\052\uffc4\001\002\000\004\011\307" +
    "\001\002\000\004\047\310\001\002\000\004\073\311\001" +
    "\002\000\004\047\312\001\002\000\004\073\313\001\002" +
    "\000\004\052\314\001\002\000\004\054\315\001\002\000" +
    "\010\007\uffc2\010\uffc2\052\uffc2\001\002\000\004\053\317" +
    "\001\002\000\006\050\320\075\321\001\002\000\004\051" +
    "\323\001\002\000\004\054\322\001\002\000\010\007\uffc3" +
    "\010\uffc3\052\uffc3\001\002\000\004\011\324\001\002\000" +
    "\004\047\325\001\002\000\004\073\326\001\002\000\004" +
    "\047\327\001\002\000\004\073\330\001\002\000\004\052" +
    "\331\001\002\000\004\054\332\001\002\000\010\007\uffc1" +
    "\010\uffc1\052\uffc1\001\002\000\010\007\uffc6\010\uffc6\052" +
    "\uffc6\001\002\000\042\004\uffc7\007\uffc7\010\uffc7\012\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\043\uffc7\052\uffc7\074\uffc7\001\002" +
    "\000\004\045\336\001\002\000\004\051\337\001\002\000" +
    "\006\007\342\010\341\001\002\000\010\007\uffbe\010\uffbe" +
    "\052\uffbe\001\002\000\004\070\362\001\002\000\006\015" +
    "\346\070\347\001\002\000\010\007\342\010\341\052\345" +
    "\001\002\000\010\007\uffbf\010\uffbf\052\uffbf\001\002\000" +
    "\042\004\uffc0\007\uffc0\010\uffc0\012\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\043\uffc0\052\uffc0\074\uffc0\001\002\000\004\053\357" +
    "\001\002\000\004\071\350\001\002\000\004\017\351\001" +
    "\002\000\004\053\352\001\002\000\004\051\353\001\002" +
    "\000\010\050\222\073\223\074\224\001\002\000\006\047" +
    "\234\052\355\001\002\000\004\054\356\001\002\000\010" +
    "\007\uffbc\010\uffbc\052\uffbc\001\002\000\010\050\176\073" +
    "\200\074\177\001\002\000\004\054\361\001\002\000\010" +
    "\007\uffbd\010\uffbd\052\uffbd\001\002\000\004\071\363\001" +
    "\002\000\004\020\364\001\002\000\004\053\365\001\002" +
    "\000\004\051\366\001\002\000\010\050\251\074\254\075" +
    "\252\001\002\000\006\047\264\052\370\001\002\000\004" +
    "\054\371\001\002\000\010\007\uffbb\010\uffbb\052\uffbb\001" +
    "\002\000\020\023\051\024\052\055\050\073\055\074\054" +
    "\075\053\076\056\001\002\000\034\025\067\026\074\054" +
    "\374\056\064\057\071\060\061\061\066\062\062\063\063" +
    "\064\065\065\072\066\060\067\070\001\002\000\044\004" +
    "\uffef\007\uffef\010\uffef\012\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\052\uffef\074\uffef\001\002\000\006\053\377" +
    "\054\376\001\002\000\044\004\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\052\ufff1\074" +
    "\ufff1\001\002\000\020\023\051\024\052\055\050\073\055" +
    "\074\054\075\053\076\056\001\002\000\034\025\067\026" +
    "\074\054\u0101\056\064\057\071\060\061\061\066\062\062" +
    "\063\063\064\065\065\072\066\060\067\070\001\002\000" +
    "\044\004\ufff0\007\ufff0\010\ufff0\012\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\052\ufff0\074\ufff0\001\002\000\004" +
    "\002\000\001\002\000\020\023\051\024\052\055\050\073" +
    "\055\074\054\075\053\076\056\001\002\000\034\025\067" +
    "\026\074\045\u0105\056\064\057\071\060\061\061\066\062" +
    "\062\063\063\064\065\065\072\066\060\067\070\001\002" +
    "\000\004\051\u0106\001\002\000\034\004\031\007\021\010" +
    "\036\012\041\027\025\030\042\031\026\032\037\035\013" +
    "\040\035\041\014\043\015\074\024\001\002\000\036\004" +
    "\031\007\021\010\036\012\041\027\025\030\042\031\026" +
    "\032\037\035\013\040\035\041\014\043\015\052\u0108\074" +
    "\024\001\002\000\042\004\uffe1\007\uffe1\010\uffe1\012\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\043\uffe1\052\uffe1\074\uffe1\001\002" +
    "\000\004\027\u010a\001\002\000\004\074\u010b\001\002\000" +
    "\004\053\u010c\001\002\000\004\076\u010d\001\002\000\004" +
    "\054\u010e\001\002\000\004\074\u010f\001\002\000\006\062" +
    "\u0110\064\u0111\001\002\000\004\076\u011b\001\002\000\004" +
    "\076\u0112\001\002\000\004\054\u0113\001\002\000\004\074" +
    "\u0114\001\002\000\004\056\u0115\001\002\000\004\056\u0116" +
    "\001\002\000\004\045\u0117\001\002\000\004\051\u0118\001" +
    "\002\000\034\004\031\007\021\010\036\012\041\027\025" +
    "\030\042\031\026\032\037\035\013\040\035\041\014\043" +
    "\015\074\024\001\002\000\036\004\031\007\021\010\036" +
    "\012\041\027\025\030\042\031\026\032\037\035\013\040" +
    "\035\041\014\043\015\052\u011a\074\024\001\002\000\042" +
    "\004\uffe2\007\uffe2\010\uffe2\012\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\043\uffe2\052\uffe2\074\uffe2\001\002\000\004\054\u011c\001" +
    "\002\000\004\074\u011d\001\002\000\004\056\u011e\001\002" +
    "\000\004\056\u011f\001\002\000\004\045\u0120\001\002\000" +
    "\004\051\u0121\001\002\000\034\004\031\007\021\010\036" +
    "\012\041\027\025\030\042\031\026\032\037\035\013\040" +
    "\035\041\014\043\015\074\024\001\002\000\036\004\031" +
    "\007\021\010\036\012\041\027\025\030\042\031\026\032" +
    "\037\035\013\040\035\041\014\043\015\052\u0123\074\024" +
    "\001\002\000\042\004\uffe3\007\uffe3\010\uffe3\012\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\043\uffe3\052\uffe3\074\uffe3\001\002\000" +
    "\004\074\u0125\001\002\000\004\045\u0126\001\002\000\004" +
    "\051\u0127\001\002\000\004\037\u0129\001\002\000\006\036" +
    "\uffec\037\uffec\001\002\000\004\076\u0130\001\002\000\006" +
    "\036\u012b\037\u0129\001\002\000\004\072\u012d\001\002\000" +
    "\006\036\uffed\037\uffed\001\002\000\034\004\031\007\021" +
    "\010\036\012\041\027\025\030\042\031\026\032\037\035" +
    "\013\040\035\041\014\043\015\074\024\001\002\000\036" +
    "\004\031\007\021\010\036\012\041\027\025\030\042\031" +
    "\026\032\037\035\013\040\035\041\014\043\015\052\u012f" +
    "\074\024\001\002\000\042\004\uffee\007\uffee\010\uffee\012" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\043\uffee\052\uffee\074\uffee\001" +
    "\002\000\004\072\u0131\001\002\000\034\004\031\007\021" +
    "\010\036\012\041\027\025\030\042\031\026\032\037\035" +
    "\013\040\035\041\014\043\015\074\024\001\002\000\040" +
    "\004\031\007\021\010\036\012\041\027\025\030\042\031" +
    "\026\032\037\035\013\036\uffeb\037\uffeb\040\035\041\014" +
    "\043\015\074\024\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\022\004\016\005" +
    "\037\006\027\007\043\010\033\011\031\012\026\013\042" +
    "\014\032\015\015\025\021\035\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\117" +
    "\004\016\005\037\006\027\007\043\010\033\011\031\012" +
    "\026\013\042\014\032\025\021\035\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\056\001\001\000\004\026\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\110\001\001\000\004\026" +
    "\107\001\001\000\004\026\106\001\001\000\004\026\105" +
    "\001\001\000\004\026\104\001\001\000\004\026\103\001" +
    "\001\000\004\026\102\001\001\000\004\026\101\001\001" +
    "\000\004\026\100\001\001\000\004\026\077\001\001\000" +
    "\004\026\076\001\001\000\002\001\001\000\004\026\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\022\004\016" +
    "\005\037\006\027\007\043\010\033\011\031\012\026\013" +
    "\042\014\032\015\116\025\021\035\017\001\001\000\032" +
    "\003\117\004\016\005\037\006\027\007\043\010\033\011" +
    "\031\012\026\013\042\014\032\025\021\035\017\001\001" +
    "\000\002\001\001\000\006\023\123\036\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\022\004\016\005\037\006\027\007\043\010\033" +
    "\011\031\012\026\013\042\014\032\015\130\025\021\035" +
    "\017\001\001\000\032\003\117\004\016\005\037\006\027" +
    "\007\043\010\033\011\031\012\026\013\042\014\032\025" +
    "\021\035\017\001\001\000\002\001\001\000\004\026\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\022\004\016\005\037\006\027\007\043\010\033\011\031" +
    "\012\026\013\042\014\032\015\136\025\021\035\017\001" +
    "\001\000\032\003\117\004\016\005\037\006\027\007\043" +
    "\010\033\011\031\012\026\013\042\014\032\025\021\035" +
    "\017\001\001\000\002\001\001\000\034\003\022\004\016" +
    "\005\037\006\027\007\043\010\033\011\031\012\026\013" +
    "\042\014\032\015\141\025\021\035\017\001\001\000\032" +
    "\003\117\004\016\005\037\006\027\007\043\010\033\011" +
    "\031\012\026\013\042\014\032\025\021\035\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\022\004\016\005\037\006\027\007\043\010\033" +
    "\011\031\012\026\013\042\014\032\015\146\025\021\035" +
    "\017\001\001\000\032\003\117\004\016\005\037\006\027" +
    "\007\043\010\033\011\031\012\026\013\042\014\032\025" +
    "\021\035\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\163\030\166\001\001\000\004\030\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\220\031\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\247\032\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\274\027\276\001\001\000\004" +
    "\027\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\342\034\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\353\031" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\366\032\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\022\004\016\005\037\006\027\007" +
    "\043\010\033\011\031\012\026\013\042\014\032\015\u0106" +
    "\025\021\035\017\001\001\000\032\003\117\004\016\005" +
    "\037\006\027\007\043\010\033\011\031\012\026\013\042" +
    "\014\032\025\021\035\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\022\004\016" +
    "\005\037\006\027\007\043\010\033\011\031\012\026\013" +
    "\042\014\032\015\u0118\025\021\035\017\001\001\000\032" +
    "\003\117\004\016\005\037\006\027\007\043\010\033\011" +
    "\031\012\026\013\042\014\032\025\021\035\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\022\004\016\005\037\006\027\007" +
    "\043\010\033\011\031\012\026\013\042\014\032\015\u0121" +
    "\025\021\035\017\001\001\000\032\003\117\004\016\005" +
    "\037\006\027\007\043\010\033\011\031\012\026\013\042" +
    "\014\032\025\021\035\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\u0129\037\u0127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\022\004\016\005\037\006\027\007" +
    "\043\010\033\011\031\012\026\013\042\014\032\015\u012d" +
    "\025\021\035\017\001\001\000\032\003\117\004\016\005" +
    "\037\006\027\007\043\010\033\011\031\012\026\013\042" +
    "\014\032\025\021\035\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\022\004\016\005\037\006\027" +
    "\007\043\010\033\011\031\012\026\013\042\014\032\015" +
    "\u0131\025\021\035\017\001\001\000\032\003\117\004\016" +
    "\005\037\006\027\007\043\010\033\011\031\012\026\013" +
    "\042\014\032\025\021\035\017\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String Statpy_Result = "def main():\n";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RVOID RMAIN PARENTESIS_O PARENTESIS_C CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Statpy_Result += a;  Statpy_Result += "\n\nif__name__ = \"__main__\";\n\tmain()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   if (a != null) list +="\t"+a+"\n"; RESULT = list;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     RESULT = "\t"+a+"\n";     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= definirglobales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= graficabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= graficapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= assignedvalues 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= switch_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= for 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= while 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= dowhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // print ::= RCONSOLE DOT RWRITE PARENTESIS_O expresion PARENTESIS_C SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "Print("+a.toString()+")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assignedvalues ::= type VARIABLE SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a.toString() + " = null"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignedvalues",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assignedvalues ::= type VARIABLE EQUALS expresion SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a.toString() + " = "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignedvalues",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignedvalues ::= VARIABLE EQUALS expresion SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a.toString() + " = "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignedvalues",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // switch_ ::= RSWITCH PARENTESIS_O VARIABLE PARENTESIS_C CURLY_O cases RDEFAULT COLON lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "def switch(case, "+a+"0:\n\tswitcher = {\n"+"IDENT[START]\n"+list+"default: "+b+"\nIDENT[FINISH]\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cases ::= cases case 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   if (a != null) list += ""+a; RESULT = list;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cases ::= case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     RESULT = a;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // case ::= RCASE ENTERO COLON lista_instr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + ": " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if ::= RIF PARENTESIS_O expresion PARENTESIS_C CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "if "+a+":\n"+"IDENT[START]\n"+b.toString()+"IDENT[FINISH]\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= RIF PARENTESIS_O expresion PARENTESIS_C CURLY_O lista_instr CURLY_C RELSE CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "if "+a+":\n"+"IDENT[START]\n"+b.toString()+"IDENT[FINISH]\n"+"else {\n"+"IDENT[START]\n"+c.toString()+"IDENT[FINISH]\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= RIF PARENTESIS_O expresion PARENTESIS_C CURLY_O lista_instr CURLY_C elif_list 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "if "+a+":\n"+"IDENT[START]\n"+b.toString()+"IDENT[FINISH]\n"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if ::= RIF PARENTESIS_O expresion PARENTESIS_C CURLY_O lista_instr CURLY_C elif_list RELSE CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "if "+a+":\n"+"IDENT[START]\n"+b.toString()+"IDENT[FINISH]\n"+c+"else {\n"+"IDENT[START]\n"+d.toString()+"IDENT[FINISH]\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elif_list ::= elif_list _elif 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   if (a != null) list += ""+a; RESULT = list;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // elif_list ::= _elif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     RESULT = a;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // _elif ::= RELIF PARENTESIS_O expresion PARENTESIS_C CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "elif "+a+":\n"+"IDENT[START]\n"+b.toString()+"IDENT[FINISH]\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_elif",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // for ::= RFOR PARENTESIS_O RINT VARIABLE EQUALS ENTERO SEMICOLON VARIABLE MINOR ENTERO SEMICOLON VARIABLE PLUS PLUS PARENTESIS_C CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "for "+a+" in range "+b+","+c+"):\n"+"IDENT[START]\n"+d+"IDENT[FINISH]\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // for ::= RFOR PARENTESIS_O RINT VARIABLE EQUALS ENTERO SEMICOLON VARIABLE MINOREQUAL ENTERO SEMICOLON VARIABLE PLUS PLUS PARENTESIS_C CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "for "+a+" in range "+b+","+c+"):\n"+"IDENT[START]\n"+d+"IDENT[FINISH]\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // while ::= RWHILE PARENTESIS_O expresion PARENTESIS_C CURLY_O lista_instr CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = "while " +a+":\n"+"IDENT[START]\n"+b+"IDENT[FINISH]\n";     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dowhile ::= assignedvalues RDOWHILE CURLY_O lista_instr CURLY_C RWHILE PARENTESIS_O expresion PARENTESIS_C SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = a+"\n while True:\n"+"IDENT[START]\n"+b+"if ("+c+"):\n"+"IDENT[START]\n"+"break\n"+"IDENT[FINISH]\n"+"IDENT[FINISH]\n";      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= RSTRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= RINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= RBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= RCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = "not "+ a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion PLUS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" + "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion LESS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" - "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion BY expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" * "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion DIVIDED expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" / "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MINOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" < "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion GREATER expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" > "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MINOREQUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" <= "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion GREATEREQUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" >= "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion EQUALEQUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" == "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion DIFERENT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" != "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion RAND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" and "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion ROR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString()+" or "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // definirglobales ::= RVOID RGLOBALES PARENTESIS_O PARENTESIS_C CURLY_O var_list CURLY_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definirglobales",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_list ::= var_list var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_list ::= var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // var ::= RSTRING VARIABLE EQUALS CADENA SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  MainPackage.Main.globalVariables.put(a,b.replace("\"", ""));   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var ::= RDOUBLE VARIABLE EQUALS DECIMAL SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  MainPackage.Main.globalVariables.put(a,b.replace("\"", ""));   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var ::= RSTRING VARIABLE EQUALS DOLLAR CURLY_O RNEWVAL COMMA CADENA COMMA CADENA CURLY_C SEMICOLON 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		     String tmp = MainPackage.Main.FinInJson(a.replace("\"", ""),c.replace("\"", ""));
            MainPackage.Main.globalVariables.put(b.replace("\"",""), tmp);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var ::= RDOUBLE VARIABLE EQUALS DOLLAR CURLY_O RNEWVAL COMMA CADENA COMMA CADENA CURLY_C SEMICOLON 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		    String tmp = MainPackage.Main.FinInJson(a.replace("\"", ""), c.replace("\"", ""));
             MainPackage.Main.globalVariables.put(b.replace("\"",""), tmp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // graficapie ::= RVOID RPIE PARENTESIS_O PARENTESIS_C CURLY_O pie_list CURLY_C 
            {
              Object RESULT =null;
		   MainPackage.Main.createPieChart();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficapie",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pie_list ::= pie_list pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pie_list ::= pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // pie ::= RSTRING RTITULO EQUALS _string SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 MainPackage.Main.BarChart1.setTittle(a.toString());    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // pie ::= RSTRING BRACKET_O BRACKET_C REJEX EQUALS CURLY_O array_ejex CURLY_C SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // pie ::= RDOUBLE BRACKET_O BRACKET_C RVALORES EQUALS CURLY_O array_val CURLY_C SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // graficabarras ::= RVOID RBARRAS PARENTESIS_O PARENTESIS_C CURLY_O barras_list CURLY_C 
            {
              Object RESULT =null;
		   MainPackage.Main.createBarChart();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // barras_list ::= barras_list barras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // barras_list ::= barras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // barras ::= RSTRING RTITULO EQUALS _string SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 MainPackage.Main.BarChart1.setTittle(a.toString());    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // barras ::= RSTRING BRACKET_O BRACKET_C REJEX EQUALS CURLY_O array_ejex CURLY_C SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // barras ::= RDOUBLE BRACKET_O BRACKET_C RVALORES EQUALS CURLY_O array_val CURLY_C SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // barras ::= RSTRING RTITULOX EQUALS _string SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 MainPackage.Main.BarChart1.setTittleX(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // barras ::= RSTRING RTITULOY EQUALS _string SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 MainPackage.Main.BarChart1.setTittleY(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _string ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.replace("\"", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_string",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // _string ::= VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = MainPackage.Main.FindVariable(a.replace("\"", ""));    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_string",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // _string ::= DOLLAR CURLY_O RNEWVAL COMMA CADENA COMMA CADENA CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = MainPackage.Main.FinInJson(a.replace("\"", ""),c.replace("\"", ""));    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_string",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // array_ejex ::= array_ejex COMMA _ejex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_ejex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_ejex ::= _ejex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_ejex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // _ejex ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 MainPackage.Main.tmplist_ejex.add(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_ejex",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // _ejex ::= VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    String tmp = MainPackage.Main.FindVariable(a.replace("\"", ""));
                                                                                          MainPackage.Main.tmplist_ejex.add(tmp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_ejex",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _ejex ::= DOLLAR CURLY_O RNEWVAL COMMA CADENA COMMA CADENA CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		     String tmp = MainPackage.Main.FinInJson(a.replace("\"", ""),c.replace("\"", ""));
                                                                                           MainPackage.Main.tmplist_ejex.add(tmp);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_ejex",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // array_val ::= array_val COMMA _val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_val",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // array_val ::= _val 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_val",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // _val ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 MainPackage.Main.tmplist_values.add(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_val",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // _val ::= VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    String tmp = MainPackage.Main.FindVariable(a.replace("\"", ""));
                                                                                          MainPackage.Main.tmplist_values.add(tmp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_val",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // _val ::= DOLLAR CURLY_O RNEWVAL COMMA CADENA COMMA CADENA CURLY_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		     String tmp = MainPackage.Main.FinInJson(a.replace("\"", ""),c.replace("\"", ""));
                                                                                           MainPackage.Main.tmplist_values.add(tmp);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_val",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
