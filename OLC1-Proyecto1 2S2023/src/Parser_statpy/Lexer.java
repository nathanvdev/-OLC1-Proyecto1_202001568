// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Parser_statpy/Lexer.jflex

// ------------  Paquete e importaciones ------------
package Parser_statpy;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\1\0\1\7\3\0\1\10\1\11\1\12"+
    "\1\0\1\13\1\0\1\14\1\15\12\16\1\0\1\17"+
    "\1\0\1\20\3\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\30\1\33\1\34"+
    "\1\35\1\36\1\37\1\30\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\30\1\50\1\0\1\51"+
    "\1\0\1\30\1\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\30\1\33\1\34"+
    "\1\35\1\36\1\37\1\30\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\30\1\52\1\0\1\53"+
    "\7\0\1\3\44\0\1\30\12\0\1\30\4\0\1\30"+
    "\5\0\27\30\1\0\37\30\1\0\70\30\2\31\115\30"+
    "\1\41\u0142\30\4\0\14\30\16\0\5\30\7\0\1\30"+
    "\1\0\1\30\21\0\165\30\1\0\2\30\2\0\4\30"+
    "\1\0\1\30\6\0\1\30\1\0\3\30\1\0\1\30"+
    "\1\0\24\30\1\0\123\30\1\0\213\30\1\0\255\30"+
    "\1\0\46\30\2\0\1\30\6\0\51\30\10\0\55\30"+
    "\1\0\1\30\1\0\2\30\1\0\2\30\1\0\1\30"+
    "\10\0\33\30\4\0\4\30\35\0\13\30\5\0\100\30"+
    "\12\16\4\0\146\30\1\0\10\30\2\0\12\30\1\0"+
    "\6\30\12\16\3\30\2\0\1\30\20\0\73\30\2\0"+
    "\145\30\16\0\12\16\54\30\4\0\1\30\2\0\1\30"+
    "\2\0\56\30\22\0\34\30\4\0\13\30\65\0\25\30"+
    "\1\0\10\30\25\0\17\30\1\0\201\30\2\0\12\16"+
    "\1\0\23\30\1\0\10\30\2\0\2\30\2\0\26\30"+
    "\1\0\7\30\1\0\1\30\3\0\4\30\2\0\11\30"+
    "\2\0\2\30\2\0\4\30\10\0\1\30\4\0\2\30"+
    "\1\0\5\30\2\0\12\16\2\30\12\0\1\30\1\0"+
    "\1\30\2\0\3\30\1\0\6\30\4\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\2\30\1\0"+
    "\2\30\2\0\1\30\1\0\5\30\4\0\2\30\2\0"+
    "\3\30\3\0\1\30\7\0\4\30\1\0\1\30\7\0"+
    "\12\16\6\30\13\0\3\30\1\0\11\30\1\0\3\30"+
    "\1\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30"+
    "\2\0\12\30\1\0\3\30\1\0\3\30\2\0\1\30"+
    "\17\0\4\30\2\0\12\16\11\0\7\30\1\0\3\30"+
    "\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30"+
    "\1\0\2\30\1\0\5\30\2\0\11\30\2\0\2\30"+
    "\2\0\3\30\10\0\2\30\4\0\2\30\1\0\5\30"+
    "\2\0\12\16\1\0\1\30\20\0\2\30\1\0\6\30"+
    "\3\0\3\30\1\0\4\30\3\0\2\30\1\0\1\30"+
    "\1\0\2\30\3\0\2\30\3\0\3\30\3\0\14\30"+
    "\4\0\5\30\3\0\3\30\1\0\4\30\2\0\1\30"+
    "\6\0\1\30\16\0\12\16\20\0\15\30\1\0\3\30"+
    "\1\0\27\30\1\0\20\30\3\0\10\30\1\0\3\30"+
    "\1\0\4\30\7\0\2\30\1\0\3\30\5\0\4\30"+
    "\2\0\12\16\20\0\4\30\1\0\10\30\1\0\3\30"+
    "\1\0\27\30\1\0\12\30\1\0\5\30\2\0\11\30"+
    "\1\0\3\30\1\0\4\30\7\0\2\30\7\0\1\30"+
    "\1\0\4\30\2\0\12\16\1\0\2\30\15\0\4\30"+
    "\1\0\10\30\1\0\3\30\1\0\63\30\1\0\3\30"+
    "\1\0\5\30\5\0\4\30\7\0\5\30\2\0\12\16"+
    "\12\0\6\30\2\0\2\30\1\0\22\30\3\0\30\30"+
    "\1\0\11\30\1\0\1\30\2\0\7\30\3\0\1\30"+
    "\4\0\6\30\1\0\1\30\1\0\10\30\6\0\12\16"+
    "\2\0\2\30\15\0\72\30\5\0\17\30\1\0\12\16"+
    "\47\0\2\30\1\0\1\30\1\0\5\30\1\0\30\30"+
    "\1\0\1\30\1\0\27\30\2\0\5\30\1\0\1\30"+
    "\1\0\6\30\2\0\12\16\2\0\4\30\40\0\1\30"+
    "\27\0\2\30\6\0\12\16\13\0\1\30\1\0\1\30"+
    "\1\0\1\30\4\0\12\30\1\0\44\30\4\0\24\30"+
    "\1\0\22\30\1\0\44\30\11\0\1\30\71\0\100\30"+
    "\12\16\6\0\100\30\12\16\4\30\2\0\46\30\1\0"+
    "\1\30\5\0\1\30\2\0\53\30\1\0\u014d\30\1\0"+
    "\4\30\2\0\7\30\1\0\1\30\1\0\4\30\2\0"+
    "\51\30\1\0\4\30\2\0\41\30\1\0\4\30\2\0"+
    "\7\30\1\0\1\30\1\0\4\30\2\0\17\30\1\0"+
    "\71\30\1\0\4\30\2\0\103\30\2\0\3\30\40\0"+
    "\20\30\20\0\126\30\2\0\6\30\3\0\u016c\30\2\0"+
    "\21\30\1\0\32\30\5\0\113\30\3\0\13\30\7\0"+
    "\15\30\1\0\7\30\13\0\25\30\13\0\24\30\14\0"+
    "\15\30\1\0\3\30\1\0\2\30\14\0\124\30\3\0"+
    "\1\30\4\0\2\30\2\0\12\16\41\0\3\30\2\0"+
    "\12\16\6\0\131\30\7\0\53\30\5\0\106\30\12\0"+
    "\37\30\1\0\14\30\4\0\14\30\12\0\12\16\36\30"+
    "\2\0\5\30\13\0\54\30\4\0\32\30\6\0\12\16"+
    "\46\0\34\30\4\0\77\30\1\0\35\30\2\0\1\30"+
    "\12\16\6\0\12\16\15\0\1\30\10\0\17\30\101\0"+
    "\114\30\4\0\12\16\21\0\11\30\14\0\60\30\12\16"+
    "\72\30\14\0\70\30\10\0\12\16\3\0\3\30\12\16"+
    "\44\30\2\0\11\30\7\0\53\30\2\0\3\30\20\0"+
    "\3\30\1\0\47\30\5\0\372\30\1\0\33\30\2\0"+
    "\6\30\2\0\46\30\2\0\6\30\2\0\10\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\37\30\2\0"+
    "\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0"+
    "\7\30\3\0\4\30\2\0\6\30\4\0\15\30\5\0"+
    "\3\30\1\0\7\30\53\0\2\3\25\0\2\30\23\0"+
    "\1\30\34\0\1\30\15\0\1\30\20\0\15\30\63\0"+
    "\41\30\21\0\1\30\4\0\1\30\2\0\12\30\1\0"+
    "\1\30\3\0\5\30\6\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\4\30\1\0\13\30\2\0\4\30\5\0"+
    "\5\30\4\0\1\30\21\0\51\30\u022d\0\64\30\26\0"+
    "\57\30\1\0\57\30\1\0\205\30\6\0\11\30\14\0"+
    "\46\30\1\0\1\30\5\0\1\30\2\0\70\30\7\0"+
    "\1\30\17\0\30\30\11\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\40\30\57\0\1\30\325\0"+
    "\3\30\31\0\17\30\1\0\5\30\2\0\5\30\4\0"+
    "\126\30\2\0\2\30\2\0\3\30\1\0\132\30\1\0"+
    "\4\30\5\0\53\30\1\0\136\30\21\0\33\30\65\0"+
    "\306\30\112\0\360\30\20\0\215\30\103\0\56\30\2\0"+
    "\15\30\3\0\20\30\12\16\2\30\24\0\63\30\1\0"+
    "\12\30\1\0\163\30\45\0\11\30\2\0\147\30\2\0"+
    "\65\30\2\0\5\30\60\0\61\30\30\0\64\30\14\0"+
    "\106\30\12\0\12\16\6\0\30\30\3\0\1\30\1\0"+
    "\3\30\12\16\44\30\2\0\44\30\14\0\35\30\3\0"+
    "\101\30\16\0\1\30\12\16\6\0\20\30\12\16\5\30"+
    "\1\0\67\30\11\0\16\30\2\0\12\16\6\0\27\30"+
    "\3\0\111\30\30\0\3\30\2\0\20\30\2\0\5\30"+
    "\12\0\6\30\2\0\6\30\2\0\6\30\11\0\7\30"+
    "\1\0\7\30\1\0\53\30\1\0\14\30\10\0\173\30"+
    "\1\0\2\30\2\0\12\16\6\0\244\30\14\0\27\30"+
    "\4\0\61\30\4\0\u0100\3\156\30\2\0\152\30\46\0"+
    "\7\30\14\0\5\30\5\0\14\30\1\0\15\30\1\0"+
    "\5\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0"+
    "\154\30\41\0\153\30\22\0\100\30\2\0\66\30\50\0"+
    "\14\30\4\0\20\30\20\0\20\30\3\0\2\30\30\0"+
    "\3\30\40\0\5\30\1\0\207\30\23\0\12\16\7\0"+
    "\32\30\4\0\1\30\1\0\32\30\13\0\131\30\3\0"+
    "\6\30\2\0\6\30\2\0\6\30\2\0\3\30\43\0"+
    "\14\30\1\0\32\30\1\0\23\30\1\0\2\30\1\0"+
    "\17\30\2\0\16\30\42\0\173\30\105\0\65\30\210\0"+
    "\1\30\202\0\35\30\3\0\61\30\17\0\1\30\37\0"+
    "\40\30\15\0\36\30\5\0\53\30\5\0\36\30\2\0"+
    "\44\30\4\0\10\30\1\0\5\30\52\0\236\30\2\0"+
    "\12\16\6\0\44\30\4\0\44\30\4\0\50\30\10\0"+
    "\64\30\234\0\67\30\11\0\26\30\12\0\10\30\230\0"+
    "\6\30\2\0\1\30\1\0\54\30\1\0\2\30\3\0"+
    "\1\30\2\0\27\30\12\0\27\30\11\0\37\30\101\0"+
    "\23\30\1\0\2\30\12\0\26\30\12\0\32\30\106\0"+
    "\70\30\6\0\2\30\100\0\4\30\1\0\2\30\5\0"+
    "\10\30\1\0\3\30\1\0\35\30\2\0\3\30\4\0"+
    "\1\30\40\0\35\30\3\0\35\30\43\0\10\30\1\0"+
    "\36\30\31\0\66\30\12\0\26\30\12\0\23\30\15\0"+
    "\22\30\156\0\111\30\67\0\63\30\15\0\63\30\15\0"+
    "\50\30\10\0\12\16\306\0\35\30\12\0\1\30\10\0"+
    "\41\30\217\0\27\30\11\0\107\30\37\0\12\16\17\0"+
    "\74\30\25\0\31\30\7\0\12\16\6\0\65\30\1\0"+
    "\12\16\4\0\3\30\11\0\44\30\2\0\1\30\11\0"+
    "\105\30\4\0\4\30\3\0\12\16\1\30\1\0\1\30"+
    "\43\0\22\30\1\0\45\30\6\0\1\30\101\0\7\30"+
    "\1\0\1\30\1\0\4\30\1\0\17\30\1\0\12\30"+
    "\7\0\73\30\5\0\12\16\6\0\4\30\1\0\10\30"+
    "\2\0\2\30\2\0\26\30\1\0\7\30\1\0\2\30"+
    "\1\0\5\30\1\0\12\30\2\0\2\30\2\0\3\30"+
    "\2\0\1\30\6\0\1\30\5\0\7\30\2\0\7\30"+
    "\3\0\5\30\213\0\113\30\5\0\12\16\4\0\2\30"+
    "\40\0\106\30\1\0\1\30\10\0\12\16\246\0\66\30"+
    "\2\0\11\30\27\0\6\30\42\0\101\30\3\0\1\30"+
    "\13\0\12\16\46\0\71\30\7\0\12\16\66\0\33\30"+
    "\2\0\17\30\4\0\12\16\306\0\73\30\145\0\100\30"+
    "\12\16\25\0\1\30\240\0\10\30\2\0\56\30\2\0"+
    "\10\30\1\0\2\30\33\0\77\30\10\0\1\30\10\0"+
    "\112\30\3\0\1\30\42\0\71\30\7\0\11\30\1\0"+
    "\55\30\1\0\11\30\17\0\12\16\30\0\36\30\2\0"+
    "\26\30\1\0\16\30\111\0\7\30\1\0\2\30\1\0"+
    "\54\30\3\0\1\30\1\0\2\30\1\0\11\30\10\0"+
    "\12\16\6\0\6\30\1\0\2\30\1\0\45\30\1\0"+
    "\2\30\1\0\6\30\7\0\12\16\u0136\0\27\30\11\0"+
    "\232\30\146\0\157\30\21\0\304\30\274\0\57\30\321\0"+
    "\107\30\271\0\71\30\7\0\37\30\1\0\12\16\146\0"+
    "\36\30\2\0\5\30\13\0\67\30\11\0\4\30\14\0"+
    "\12\16\11\0\25\30\5\0\23\30\260\0\100\30\200\0"+
    "\113\30\4\0\71\30\7\0\21\30\100\0\2\30\1\0"+
    "\1\30\34\0\370\30\10\0\363\30\15\0\37\30\61\0"+
    "\3\30\21\0\4\30\10\0\u018c\30\4\0\153\30\5\0"+
    "\15\30\3\0\11\30\7\0\12\30\3\0\2\30\306\0"+
    "\5\30\3\0\6\30\10\0\10\30\2\0\7\30\36\0"+
    "\4\30\224\0\3\30\273\0\125\30\1\0\107\30\1\0"+
    "\2\30\2\0\1\30\2\0\2\30\2\0\4\30\1\0"+
    "\14\30\1\0\1\30\1\0\7\30\1\0\101\30\1\0"+
    "\4\30\2\0\10\30\1\0\7\30\1\0\34\30\1\0"+
    "\4\30\1\0\5\30\1\0\1\30\3\0\7\30\1\0"+
    "\u0154\30\2\0\31\30\1\0\31\30\1\0\37\30\1\0"+
    "\31\30\1\0\37\30\1\0\31\30\1\0\37\30\1\0"+
    "\31\30\1\0\37\30\1\0\31\30\1\0\10\30\2\0"+
    "\62\16\67\30\4\0\62\30\10\0\1\30\16\0\1\30"+
    "\26\0\5\30\1\0\17\30\120\0\7\30\1\0\21\30"+
    "\2\0\7\30\1\0\2\30\1\0\5\30\325\0\55\30"+
    "\3\0\16\30\2\0\12\16\4\0\1\30\u0171\0\60\30"+
    "\12\16\6\0\305\30\13\0\7\30\51\0\114\30\4\0"+
    "\12\16\246\0\4\30\1\0\33\30\1\0\2\30\1\0"+
    "\1\30\2\0\1\30\1\0\12\30\1\0\4\30\1\0"+
    "\1\30\1\0\1\30\6\0\1\30\4\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\3\30\1\0\2\30\1\0"+
    "\1\30\2\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\2\30\1\0\1\30\2\0"+
    "\4\30\1\0\7\30\1\0\4\30\1\0\4\30\1\0"+
    "\1\30\1\0\12\30\1\0\21\30\5\0\3\30\1\0"+
    "\5\30\1\0\21\30\164\0\32\30\6\0\32\30\6\0"+
    "\32\30\166\0\327\30\51\0\65\30\13\0\336\30\2\0"+
    "\u0182\30\16\0\u0131\30\37\0\36\30\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\13\10\1\13\1\14"+
    "\1\15\1\16\1\0\1\17\1\0\1\20\1\0\14\10"+
    "\1\0\1\21\14\10\1\20\3\10\1\22\1\10\1\23"+
    "\4\10\1\24\11\10\1\25\2\10\1\26\2\10\1\27"+
    "\1\30\1\10\1\31\3\10\1\32\1\33\1\34\3\10"+
    "\1\35\5\10\1\36\5\10\1\37\1\10\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\54\0\54\0\54\0\54"+
    "\0\54\0\204\0\260\0\54\0\54\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\54\0\54\0\54\0\54\0\130\0\54\0\u02c0\0\u02ec"+
    "\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c"+
    "\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0318\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u02c0\0\u0790\0\u07bc\0\u07e8\0\334"+
    "\0\u0814\0\334\0\u0840\0\u086c\0\u0898\0\u08c4\0\334\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\334\0\u0a7c\0\u0aa8\0\334\0\u0ad4\0\u0b00\0\334\0\u0b2c"+
    "\0\u0b58\0\334\0\u0b84\0\u0bb0\0\u0bdc\0\334\0\334\0\334"+
    "\0\u0c08\0\u0c34\0\u0c60\0\334\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\u0d3c\0\334\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\334"+
    "\0\u0e44\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\16\1\22\4\16\1\23"+
    "\1\24\3\16\1\25\1\26\1\16\1\27\1\30\2\16"+
    "\1\31\1\32\1\33\1\34\54\0\2\35\1\0\3\35"+
    "\1\36\45\35\12\0\1\37\2\0\1\40\52\0\1\41"+
    "\1\0\1\13\2\0\27\16\22\0\1\16\2\0\27\16"+
    "\22\0\1\16\2\0\15\16\1\42\11\16\22\0\1\16"+
    "\2\0\4\16\1\43\10\16\1\44\11\16\22\0\1\16"+
    "\2\0\11\16\1\45\15\16\22\0\1\16\2\0\17\16"+
    "\1\46\7\16\22\0\1\16\2\0\1\47\26\16\22\0"+
    "\1\16\2\0\4\16\1\50\22\16\22\0\1\16\2\0"+
    "\21\16\1\51\5\16\22\0\1\16\2\0\10\16\1\52"+
    "\16\16\22\0\1\16\2\0\1\53\14\16\1\54\11\16"+
    "\22\0\1\16\2\0\17\16\1\55\7\16\4\0\5\37"+
    "\1\0\4\37\1\56\41\37\2\40\3\0\47\40\16\0"+
    "\1\57\53\0\1\16\2\0\14\16\1\60\12\16\22\0"+
    "\1\16\2\0\5\16\1\61\21\16\22\0\1\16\2\0"+
    "\22\16\1\62\4\16\22\0\1\16\2\0\4\16\1\63"+
    "\22\16\22\0\1\16\2\0\1\64\26\16\22\0\1\16"+
    "\2\0\10\16\1\65\16\16\22\0\1\16\2\0\24\16"+
    "\1\66\2\16\22\0\1\16\2\0\17\16\1\67\7\16"+
    "\22\0\1\16\2\0\21\16\1\70\5\16\22\0\1\16"+
    "\2\0\12\16\1\71\14\16\22\0\1\16\2\0\10\16"+
    "\1\72\16\16\22\0\1\16\2\0\10\16\1\73\16\16"+
    "\4\0\5\37\1\0\4\37\1\56\2\37\1\74\36\37"+
    "\16\0\1\16\2\0\20\16\1\75\6\16\22\0\1\16"+
    "\2\0\10\16\1\76\16\16\22\0\1\16\2\0\1\16"+
    "\1\77\25\16\22\0\1\16\2\0\25\16\1\100\1\16"+
    "\22\0\1\16\2\0\5\16\1\101\21\16\22\0\1\16"+
    "\2\0\14\16\1\102\12\16\22\0\1\16\2\0\23\16"+
    "\1\103\3\16\22\0\1\16\2\0\10\16\1\104\16\16"+
    "\22\0\1\16\2\0\22\16\1\105\4\16\22\0\1\16"+
    "\2\0\15\16\1\106\11\16\22\0\1\16\2\0\3\16"+
    "\1\107\23\16\22\0\1\16\2\0\21\16\1\110\5\16"+
    "\22\0\1\16\2\0\15\16\1\111\11\16\22\0\1\16"+
    "\2\0\14\16\1\112\12\16\22\0\1\16\2\0\12\16"+
    "\1\113\14\16\22\0\1\16\2\0\10\16\1\114\16\16"+
    "\22\0\1\16\2\0\1\115\26\16\22\0\1\16\2\0"+
    "\14\16\1\116\12\16\22\0\1\16\2\0\12\16\1\117"+
    "\14\16\22\0\1\16\2\0\17\16\1\120\7\16\22\0"+
    "\1\16\2\0\4\16\1\121\22\16\22\0\1\16\2\0"+
    "\12\16\1\122\14\16\22\0\1\16\2\0\10\16\1\123"+
    "\16\16\22\0\1\16\2\0\4\16\1\124\22\16\22\0"+
    "\1\16\2\0\2\16\1\125\24\16\22\0\1\16\2\0"+
    "\12\16\1\126\14\16\22\0\1\16\2\0\6\16\1\127"+
    "\20\16\22\0\1\16\2\0\15\16\1\130\11\16\22\0"+
    "\1\16\2\0\4\16\1\131\22\16\22\0\1\16\2\0"+
    "\4\16\1\132\22\16\22\0\1\16\2\0\17\16\1\133"+
    "\7\16\22\0\1\16\2\0\1\134\26\16\22\0\1\16"+
    "\2\0\15\16\1\135\11\16\22\0\1\16\2\0\25\16"+
    "\1\136\1\137\22\0\1\16\2\0\20\16\1\140\6\16"+
    "\22\0\1\16\2\0\6\16\1\141\20\16\22\0\1\16"+
    "\2\0\1\16\1\142\14\16\1\143\10\16\22\0\1\16"+
    "\2\0\17\16\1\144\7\16\22\0\1\16\2\0\12\16"+
    "\1\145\14\16\22\0\1\16\2\0\1\146\26\16\22\0"+
    "\1\16\2\0\10\16\1\147\16\16\22\0\1\16\2\0"+
    "\15\16\1\150\11\16\22\0\1\16\2\0\17\16\1\151"+
    "\7\16\22\0\1\16\2\0\4\16\1\152\22\16\22\0"+
    "\1\16\2\0\1\16\1\153\25\16\22\0\1\16\2\0"+
    "\17\16\1\154\7\16\22\0\1\16\2\0\1\155\26\16"+
    "\22\0\1\16\2\0\1\156\26\16\22\0\1\16\2\0"+
    "\12\16\1\157\14\16\22\0\1\16\2\0\20\16\1\160"+
    "\6\16\22\0\1\16\2\0\4\16\1\161\22\16\22\0"+
    "\1\16\2\0\20\16\1\162\6\16\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3696];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\5\11\2\1\2\11\13\1\4\11"+
    "\1\0\1\11\1\0\1\1\1\0\14\1\1\0\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 33: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 34: break;
          case 3:
            { return new Symbol(sym.DOLLAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 35: break;
          case 4:
            { return new Symbol(sym.PARENTESIS_O, yycolumn, yyline, yytext());
            }
          // fall through
          case 36: break;
          case 5:
            { return new Symbol(sym.PARENTESIS_C, yycolumn, yyline, yytext());
            }
          // fall through
          case 37: break;
          case 6:
            { return new Symbol(sym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 38: break;
          case 7:
            { return new Symbol(sym.DOT, yycolumn, yyline, yytext());
            }
          // fall through
          case 39: break;
          case 8:
            { return new Symbol(sym.RVARIABLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 40: break;
          case 9:
            { return new Symbol(sym.SEMICOLON, yycolumn, yyline, yytext());
            }
          // fall through
          case 41: break;
          case 10:
            { return new Symbol(sym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 42: break;
          case 11:
            { return new Symbol(sym.BRACKET_O, yycolumn, yyline, yytext());
            }
          // fall through
          case 43: break;
          case 12:
            { return new Symbol(sym.BRACKET_C, yycolumn, yyline, yytext());
            }
          // fall through
          case 44: break;
          case 13:
            { return new Symbol(sym.CURLY_O, yycolumn, yyline, yytext());
            }
          // fall through
          case 45: break;
          case 14:
            { return new Symbol(sym.CURLY_C, yycolumn, yyline, yytext());
            }
          // fall through
          case 46: break;
          case 15:
            { return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 47: break;
          case 16:
            { 
            }
          // fall through
          case 48: break;
          case 17:
            { return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 49: break;
          case 18:
            { return new Symbol(sym.REJEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 50: break;
          case 19:
            { return new Symbol(sym.RMAIN, yycolumn, yyline, yytext());
            }
          // fall through
          case 51: break;
          case 20:
            { return new Symbol(sym.RVOID, yycolumn, yyline, yytext());
            }
          // fall through
          case 52: break;
          case 21:
            { return new Symbol(sym.RWRITE, yycolumn, yyline, yytext());
            }
          // fall through
          case 53: break;
          case 22:
            { return new Symbol(sym.RDOUBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 54: break;
          case 23:
            { return new Symbol(sym.RSTRING, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 24:
            { return new Symbol(sym.RTITULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 25:
            { return new Symbol(sym.RCONSOLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 26:
            { return new Symbol(sym.RTITULOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 27:
            { return new Symbol(sym.RTITULOY, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 28:
            { return new Symbol(sym.RVALORES, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 29:
            { return new Symbol(sym.RNEWVAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 30:
            { return new Symbol(sym.RPIE, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 31:
            { return new Symbol(sym.RBARRAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 32:
            { return new Symbol(sym.RGLOBALES, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
