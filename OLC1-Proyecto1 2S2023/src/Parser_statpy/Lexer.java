// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Parser_statpy/Lexer.jflex

// ------------  Paquete e importaciones ------------
package Parser_statpy;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\1\0\1\7\1\0\1\10\1\0\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\12\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\47"+
    "\1\60\1\0\1\61\1\0\1\47\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\47"+
    "\1\62\1\63\1\64\7\0\1\3\32\0\1\65\11\0"+
    "\1\47\12\0\1\47\4\0\1\47\5\0\27\47\1\0"+
    "\37\47\1\0\70\47\2\37\115\47\1\51\u0142\47\4\0"+
    "\14\47\16\0\5\47\7\0\1\47\1\0\1\47\21\0"+
    "\165\47\1\0\2\47\2\0\4\47\1\0\1\47\6\0"+
    "\1\47\1\0\3\47\1\0\1\47\1\0\24\47\1\0"+
    "\123\47\1\0\213\47\1\0\255\47\1\0\46\47\2\0"+
    "\1\47\6\0\51\47\10\0\55\47\1\0\1\47\1\0"+
    "\2\47\1\0\2\47\1\0\1\47\10\0\33\47\4\0"+
    "\4\47\35\0\13\47\5\0\100\47\12\66\4\0\146\47"+
    "\1\0\10\47\2\0\12\47\1\0\6\47\12\66\3\47"+
    "\2\0\1\47\20\0\73\47\2\0\145\47\16\0\12\66"+
    "\54\47\4\0\1\47\2\0\1\47\2\0\56\47\22\0"+
    "\34\47\4\0\13\47\65\0\25\47\1\0\10\47\25\0"+
    "\17\47\1\0\201\47\2\0\12\66\1\0\23\47\1\0"+
    "\10\47\2\0\2\47\2\0\26\47\1\0\7\47\1\0"+
    "\1\47\3\0\4\47\2\0\11\47\2\0\2\47\2\0"+
    "\4\47\10\0\1\47\4\0\2\47\1\0\5\47\2\0"+
    "\12\66\2\47\12\0\1\47\1\0\1\47\2\0\3\47"+
    "\1\0\6\47\4\0\2\47\2\0\26\47\1\0\7\47"+
    "\1\0\2\47\1\0\2\47\1\0\2\47\2\0\1\47"+
    "\1\0\5\47\4\0\2\47\2\0\3\47\3\0\1\47"+
    "\7\0\4\47\1\0\1\47\7\0\12\66\6\47\13\0"+
    "\3\47\1\0\11\47\1\0\3\47\1\0\26\47\1\0"+
    "\7\47\1\0\2\47\1\0\5\47\2\0\12\47\1\0"+
    "\3\47\1\0\3\47\2\0\1\47\17\0\4\47\2\0"+
    "\12\66\11\0\7\47\1\0\3\47\1\0\10\47\2\0"+
    "\2\47\2\0\26\47\1\0\7\47\1\0\2\47\1\0"+
    "\5\47\2\0\11\47\2\0\2\47\2\0\3\47\10\0"+
    "\2\47\4\0\2\47\1\0\5\47\2\0\12\66\1\0"+
    "\1\47\20\0\2\47\1\0\6\47\3\0\3\47\1\0"+
    "\4\47\3\0\2\47\1\0\1\47\1\0\2\47\3\0"+
    "\2\47\3\0\3\47\3\0\14\47\4\0\5\47\3\0"+
    "\3\47\1\0\4\47\2\0\1\47\6\0\1\47\16\0"+
    "\12\66\20\0\15\47\1\0\3\47\1\0\27\47\1\0"+
    "\20\47\3\0\10\47\1\0\3\47\1\0\4\47\7\0"+
    "\2\47\1\0\3\47\5\0\4\47\2\0\12\66\20\0"+
    "\4\47\1\0\10\47\1\0\3\47\1\0\27\47\1\0"+
    "\12\47\1\0\5\47\2\0\11\47\1\0\3\47\1\0"+
    "\4\47\7\0\2\47\7\0\1\47\1\0\4\47\2\0"+
    "\12\66\1\0\2\47\15\0\4\47\1\0\10\47\1\0"+
    "\3\47\1\0\63\47\1\0\3\47\1\0\5\47\5\0"+
    "\4\47\7\0\5\47\2\0\12\66\12\0\6\47\2\0"+
    "\2\47\1\0\22\47\3\0\30\47\1\0\11\47\1\0"+
    "\1\47\2\0\7\47\3\0\1\47\4\0\6\47\1\0"+
    "\1\47\1\0\10\47\6\0\12\66\2\0\2\47\15\0"+
    "\72\47\5\0\17\47\1\0\12\66\47\0\2\47\1\0"+
    "\1\47\1\0\5\47\1\0\30\47\1\0\1\47\1\0"+
    "\27\47\2\0\5\47\1\0\1\47\1\0\6\47\2\0"+
    "\12\66\2\0\4\47\40\0\1\47\27\0\2\47\6\0"+
    "\12\66\13\0\1\47\1\0\1\47\1\0\1\47\4\0"+
    "\12\47\1\0\44\47\4\0\24\47\1\0\22\47\1\0"+
    "\44\47\11\0\1\47\71\0\100\47\12\66\6\0\100\47"+
    "\12\66\4\47\2\0\46\47\1\0\1\47\5\0\1\47"+
    "\2\0\53\47\1\0\u014d\47\1\0\4\47\2\0\7\47"+
    "\1\0\1\47\1\0\4\47\2\0\51\47\1\0\4\47"+
    "\2\0\41\47\1\0\4\47\2\0\7\47\1\0\1\47"+
    "\1\0\4\47\2\0\17\47\1\0\71\47\1\0\4\47"+
    "\2\0\103\47\2\0\3\47\40\0\20\47\20\0\126\47"+
    "\2\0\6\47\3\0\u016c\47\2\0\21\47\1\65\32\47"+
    "\5\0\113\47\3\0\13\47\7\0\15\47\1\0\7\47"+
    "\13\0\25\47\13\0\24\47\14\0\15\47\1\0\3\47"+
    "\1\0\2\47\14\0\124\47\3\0\1\47\4\0\2\47"+
    "\2\0\12\66\41\0\3\47\2\0\12\66\6\0\131\47"+
    "\7\0\53\47\5\0\106\47\12\0\37\47\1\0\14\47"+
    "\4\0\14\47\12\0\12\66\36\47\2\0\5\47\13\0"+
    "\54\47\4\0\32\47\6\0\12\66\46\0\34\47\4\0"+
    "\77\47\1\0\35\47\2\0\1\47\12\66\6\0\12\66"+
    "\15\0\1\47\10\0\17\47\101\0\114\47\4\0\12\66"+
    "\21\0\11\47\14\0\60\47\12\66\72\47\14\0\70\47"+
    "\10\0\12\66\3\0\3\47\12\66\44\47\2\0\11\47"+
    "\7\0\53\47\2\0\3\47\20\0\3\47\1\0\47\47"+
    "\5\0\372\47\1\0\33\47\2\0\6\47\2\0\46\47"+
    "\2\0\6\47\2\0\10\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\37\47\2\0\65\47\1\0\7\47"+
    "\1\0\1\47\3\0\3\47\1\0\7\47\3\0\4\47"+
    "\2\0\6\47\4\0\15\47\5\0\3\47\1\0\7\47"+
    "\3\0\13\65\35\0\2\3\5\0\1\65\17\0\2\47"+
    "\23\0\1\47\12\0\1\65\21\0\1\47\15\0\1\47"+
    "\20\0\15\47\63\0\41\47\21\0\1\47\4\0\1\47"+
    "\2\0\12\47\1\0\1\47\3\0\5\47\6\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\41\3\47\1\0"+
    "\13\47\2\0\4\47\5\0\5\47\4\0\1\47\21\0"+
    "\51\47\u022d\0\64\47\26\0\57\47\1\0\57\47\1\0"+
    "\205\47\6\0\11\47\14\0\46\47\1\0\1\47\5\0"+
    "\1\47\2\0\70\47\7\0\1\47\17\0\30\47\11\0"+
    "\7\47\1\0\7\47\1\0\7\47\1\0\7\47\1\0"+
    "\7\47\1\0\7\47\1\0\7\47\1\0\7\47\1\0"+
    "\40\47\57\0\1\47\320\0\1\65\4\0\3\47\31\0"+
    "\17\47\1\0\5\47\2\0\5\47\4\0\126\47\2\0"+
    "\2\47\2\0\3\47\1\0\132\47\1\0\4\47\5\0"+
    "\53\47\1\0\136\47\21\0\33\47\65\0\306\47\112\0"+
    "\360\47\20\0\215\47\103\0\56\47\2\0\15\47\3\0"+
    "\20\47\12\66\2\47\24\0\63\47\1\0\12\47\1\0"+
    "\163\47\45\0\11\47\2\0\147\47\2\0\65\47\2\0"+
    "\5\47\60\0\61\47\30\0\64\47\14\0\106\47\12\0"+
    "\12\66\6\0\30\47\3\0\1\47\1\0\3\47\12\66"+
    "\44\47\2\0\44\47\14\0\35\47\3\0\101\47\16\0"+
    "\1\47\12\66\6\0\20\47\12\66\5\47\1\0\67\47"+
    "\11\0\16\47\2\0\12\66\6\0\27\47\3\0\111\47"+
    "\30\0\3\47\2\0\20\47\2\0\5\47\12\0\6\47"+
    "\2\0\6\47\2\0\6\47\11\0\7\47\1\0\7\47"+
    "\1\0\53\47\1\0\14\47\10\0\173\47\1\0\2\47"+
    "\2\0\12\66\6\0\244\47\14\0\27\47\4\0\61\47"+
    "\4\0\u0100\67\156\47\2\0\152\47\46\0\7\47\14\0"+
    "\5\47\5\0\14\47\1\0\15\47\1\0\5\47\1\0"+
    "\1\47\1\0\2\47\1\0\2\47\1\0\154\47\41\0"+
    "\153\47\22\0\100\47\2\0\66\47\50\0\14\47\4\0"+
    "\20\47\20\0\20\47\3\0\2\47\30\0\3\47\40\0"+
    "\5\47\1\0\207\47\23\0\12\66\7\0\32\47\4\0"+
    "\1\47\1\0\32\47\13\0\131\47\3\0\6\47\2\0"+
    "\6\47\2\0\6\47\2\0\3\47\43\0\14\47\1\0"+
    "\32\47\1\0\23\47\1\0\2\47\1\0\17\47\2\0"+
    "\16\47\42\0\173\47\105\0\65\47\210\0\1\47\202\0"+
    "\35\47\3\0\61\47\17\0\1\47\37\0\40\47\15\0"+
    "\36\47\5\0\53\47\5\0\36\47\2\0\44\47\4\0"+
    "\10\47\1\0\5\47\52\0\236\47\2\0\12\66\6\0"+
    "\44\47\4\0\44\47\4\0\50\47\10\0\64\47\234\0"+
    "\67\47\11\0\26\47\12\0\10\47\230\0\6\47\2\0"+
    "\1\47\1\0\54\47\1\0\2\47\3\0\1\47\2\0"+
    "\27\47\12\0\27\47\11\0\37\47\101\0\23\47\1\0"+
    "\2\47\12\0\26\47\12\0\32\47\106\0\70\47\6\0"+
    "\2\47\100\0\4\47\1\0\2\47\5\0\10\47\1\0"+
    "\3\47\1\0\35\47\2\0\3\47\4\0\1\47\40\0"+
    "\35\47\3\0\35\47\43\0\10\47\1\0\36\47\31\0"+
    "\66\47\12\0\26\47\12\0\23\47\15\0\22\47\156\0"+
    "\111\47\67\0\63\47\15\0\63\47\15\0\50\47\10\0"+
    "\12\66\306\0\35\47\12\0\1\47\10\0\41\47\217\0"+
    "\27\47\11\0\107\47\37\0\12\66\17\0\74\47\25\0"+
    "\31\47\7\0\12\66\6\0\65\47\1\0\12\66\4\0"+
    "\3\47\11\0\44\47\2\0\1\47\11\0\105\47\4\0"+
    "\4\47\3\0\12\66\1\47\1\0\1\47\43\0\22\47"+
    "\1\0\45\47\6\0\1\47\101\0\7\47\1\0\1\47"+
    "\1\0\4\47\1\0\17\47\1\0\12\47\7\0\73\47"+
    "\5\0\12\66\6\0\4\47\1\0\10\47\2\0\2\47"+
    "\2\0\26\47\1\0\7\47\1\0\2\47\1\0\5\47"+
    "\1\0\12\47\2\0\2\47\2\0\3\47\2\0\1\47"+
    "\6\0\1\47\5\0\7\47\2\0\7\47\3\0\5\47"+
    "\213\0\113\47\5\0\12\66\4\0\2\47\40\0\106\47"+
    "\1\0\1\47\10\0\12\66\246\0\66\47\2\0\11\47"+
    "\27\0\6\47\42\0\101\47\3\0\1\47\13\0\12\66"+
    "\46\0\71\47\7\0\12\66\66\0\33\47\2\0\17\47"+
    "\4\0\12\66\306\0\73\47\145\0\100\47\12\66\25\0"+
    "\1\47\240\0\10\47\2\0\56\47\2\0\10\47\1\0"+
    "\2\47\33\0\77\47\10\0\1\47\10\0\112\47\3\0"+
    "\1\47\42\0\71\47\7\0\11\47\1\0\55\47\1\0"+
    "\11\47\17\0\12\66\30\0\36\47\2\0\26\47\1\0"+
    "\16\47\111\0\7\47\1\0\2\47\1\0\54\47\3\0"+
    "\1\47\1\0\2\47\1\0\11\47\10\0\12\66\6\0"+
    "\6\47\1\0\2\47\1\0\45\47\1\0\2\47\1\0"+
    "\6\47\7\0\12\66\u0136\0\27\47\11\0\232\47\146\0"+
    "\157\47\21\0\304\47\274\0\57\47\321\0\107\47\271\0"+
    "\71\47\7\0\37\47\1\0\12\66\146\0\36\47\2\0"+
    "\5\47\13\0\67\47\11\0\4\47\14\0\12\66\11\0"+
    "\25\47\5\0\23\47\260\0\100\47\200\0\113\47\4\0"+
    "\71\47\7\0\21\47\100\0\2\47\1\0\1\47\34\0"+
    "\370\47\10\0\363\47\15\0\37\47\61\0\3\47\21\0"+
    "\4\47\10\0\u018c\47\4\0\153\47\5\0\15\47\3\0"+
    "\11\47\7\0\12\47\3\0\2\47\306\0\5\47\3\0"+
    "\6\47\10\0\10\47\2\0\7\47\36\0\4\47\224\0"+
    "\3\47\273\0\125\47\1\0\107\47\1\0\2\47\2\0"+
    "\1\47\2\0\2\47\2\0\4\47\1\0\14\47\1\0"+
    "\1\47\1\0\7\47\1\0\101\47\1\0\4\47\2\0"+
    "\10\47\1\0\7\47\1\0\34\47\1\0\4\47\1\0"+
    "\5\47\1\0\1\47\3\0\7\47\1\0\u0154\47\2\0"+
    "\31\47\1\0\31\47\1\0\37\47\1\0\31\47\1\0"+
    "\37\47\1\0\31\47\1\0\37\47\1\0\31\47\1\0"+
    "\37\47\1\0\31\47\1\0\10\47\2\0\62\66\67\47"+
    "\4\0\62\47\10\0\1\47\16\0\1\47\26\0\5\47"+
    "\1\0\17\47\120\0\7\47\1\0\21\47\2\0\7\47"+
    "\1\0\2\47\1\0\5\47\325\0\55\47\3\0\16\47"+
    "\2\0\12\66\4\0\1\47\u0171\0\60\47\12\66\6\0"+
    "\305\47\13\0\7\47\51\0\114\47\4\0\12\66\246\0"+
    "\4\47\1\0\33\47\1\0\2\47\1\0\1\47\2\0"+
    "\1\47\1\0\12\47\1\0\4\47\1\0\1\47\1\0"+
    "\1\47\6\0\1\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\3\47\1\0\2\47\1\0\1\47\2\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\2\47\1\0\1\47\2\0\4\47\1\0"+
    "\7\47\1\0\4\47\1\0\4\47\1\0\1\47\1\0"+
    "\12\47\1\0\21\47\5\0\3\47\1\0\5\47\1\0"+
    "\21\47\164\0\32\47\6\0\32\47\6\0\32\47\166\0"+
    "\327\47\51\0\65\47\13\0\336\47\2\0\u0182\47\16\0"+
    "\u0131\47\37\0\36\47\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\16\23\1\24\1\25"+
    "\1\26\1\1\1\27\1\23\1\30\1\0\1\31\1\32"+
    "\1\0\1\33\1\0\1\34\1\35\1\36\6\23\1\37"+
    "\5\23\1\40\13\23\1\41\1\0\1\42\12\23\1\43"+
    "\1\23\1\44\12\23\1\33\1\45\1\23\1\46\1\47"+
    "\4\23\1\50\1\51\1\23\1\52\4\23\1\53\1\23"+
    "\1\54\2\23\1\55\4\23\1\0\6\23\1\56\1\57"+
    "\3\23\1\60\1\0\2\23\1\61\1\62\1\63\1\23"+
    "\1\64\1\65\1\23\1\66\2\23\1\67\1\70\1\71"+
    "\3\23\1\72\5\23\1\73\5\23\1\74\1\23\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\160\0\250\0\70\0\340\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\u0118\0\u0150"+
    "\0\70\0\70\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\70\0\70\0\70\0\u0540\0\70"+
    "\0\u0578\0\70\0\250\0\70\0\70\0\u05b0\0\u05e8\0\u0620"+
    "\0\70\0\70\0\70\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u0230"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\70\0\u0b60\0\u0620\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0230\0\u0dc8\0\u0230\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u05b0\0\u0230\0\u1030"+
    "\0\u0230\0\u0230\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u0230\0\u1148"+
    "\0\u1180\0\u0230\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u0230\0\u1298"+
    "\0\u0230\0\u12d0\0\u1308\0\u0230\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u0230"+
    "\0\u0230\0\u15a8\0\u15e0\0\u1618\0\u0230\0\u1650\0\u1688\0\u16c0"+
    "\0\u0230\0\u0230\0\u16f8\0\u1730\0\u0230\0\u0230\0\u1768\0\70"+
    "\0\u17a0\0\u17d8\0\u0230\0\u0230\0\u0230\0\u1810\0\u1848\0\u1880"+
    "\0\u0230\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u0230\0\u19d0"+
    "\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u0230\0\u1ae8\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\26\1\35\3\26"+
    "\1\36\1\37\4\26\1\40\1\41\1\26\1\42\1\43"+
    "\2\26\1\44\1\45\1\46\1\47\1\50\1\2\1\51"+
    "\116\0\1\52\42\0\2\53\1\0\3\53\1\54\61\53"+
    "\10\0\1\55\72\0\1\56\4\0\1\57\66\0\1\60"+
    "\1\0\1\20\5\0\31\26\6\0\1\51\26\0\1\61"+
    "\67\0\1\62\67\0\1\63\63\0\1\26\5\0\31\26"+
    "\6\0\1\26\22\0\1\26\5\0\16\26\1\64\2\26"+
    "\1\65\7\26\6\0\1\26\22\0\1\26\5\0\1\66"+
    "\6\26\1\67\6\26\1\70\12\26\6\0\1\26\22\0"+
    "\1\26\5\0\4\26\1\71\11\26\1\72\12\26\6\0"+
    "\1\26\22\0\1\26\5\0\11\26\1\73\1\26\1\74"+
    "\15\26\6\0\1\26\22\0\1\26\5\0\1\75\15\26"+
    "\1\76\12\26\6\0\1\26\22\0\1\26\5\0\21\26"+
    "\1\77\7\26\6\0\1\26\22\0\1\26\5\0\5\26"+
    "\1\100\7\26\1\101\13\26\6\0\1\26\22\0\1\26"+
    "\5\0\1\102\30\26\6\0\1\26\22\0\1\26\5\0"+
    "\4\26\1\103\24\26\6\0\1\26\22\0\1\26\5\0"+
    "\23\26\1\104\2\26\1\105\2\26\6\0\1\26\22\0"+
    "\1\26\5\0\10\26\1\106\10\26\1\107\7\26\6\0"+
    "\1\26\22\0\1\26\5\0\1\110\15\26\1\111\12\26"+
    "\6\0\1\26\22\0\1\26\5\0\7\26\1\112\11\26"+
    "\1\113\7\26\6\0\1\26\64\0\1\114\23\0\1\60"+
    "\1\0\1\51\5\0\31\26\6\0\1\51\1\0\5\56"+
    "\1\0\5\56\1\115\54\56\2\57\3\0\62\57\22\0"+
    "\1\116\44\0\1\116\22\0\1\26\5\0\16\26\1\117"+
    "\12\26\6\0\1\26\22\0\1\26\5\0\4\26\1\120"+
    "\24\26\6\0\1\26\22\0\1\26\5\0\22\26\1\121"+
    "\6\26\6\0\1\26\22\0\1\26\5\0\1\122\30\26"+
    "\6\0\1\26\22\0\1\26\5\0\15\26\1\123\13\26"+
    "\6\0\1\26\22\0\1\26\5\0\5\26\1\124\23\26"+
    "\6\0\1\26\22\0\1\26\5\0\24\26\1\125\4\26"+
    "\6\0\1\26\22\0\1\26\5\0\4\26\1\126\24\26"+
    "\6\0\1\26\22\0\1\26\5\0\22\26\1\127\6\26"+
    "\6\0\1\26\22\0\1\26\5\0\13\26\1\130\15\26"+
    "\6\0\1\26\22\0\1\26\5\0\21\26\1\131\7\26"+
    "\6\0\1\26\22\0\1\26\5\0\1\132\30\26\6\0"+
    "\1\26\22\0\1\26\5\0\23\26\1\133\5\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\134\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\26\26\1\135\2\26\6\0"+
    "\1\26\22\0\1\26\5\0\21\26\1\136\7\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\137\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\23\26\1\140\5\26\6\0"+
    "\1\26\22\0\1\26\5\0\24\26\1\141\4\26\6\0"+
    "\1\26\22\0\1\26\5\0\13\26\1\142\15\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\143\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\144\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\145\20\26\6\0"+
    "\1\26\1\0\5\56\1\0\5\56\1\115\4\56\1\146"+
    "\47\56\21\0\1\26\5\0\13\26\1\147\15\26\6\0"+
    "\1\26\22\0\1\26\5\0\1\150\30\26\6\0\1\26"+
    "\22\0\1\26\5\0\4\26\1\151\24\26\6\0\1\26"+
    "\22\0\1\26\5\0\21\26\1\152\7\26\6\0\1\26"+
    "\22\0\1\26\5\0\22\26\1\153\6\26\6\0\1\26"+
    "\22\0\1\26\5\0\1\154\7\26\1\155\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\1\26\1\156\27\26\6\0"+
    "\1\26\22\0\1\26\5\0\27\26\1\157\1\26\6\0"+
    "\1\26\22\0\1\26\5\0\4\26\1\160\24\26\6\0"+
    "\1\26\22\0\1\26\5\0\22\26\1\141\6\26\6\0"+
    "\1\26\22\0\1\26\5\0\5\26\1\161\23\26\6\0"+
    "\1\26\22\0\1\26\5\0\15\26\1\162\13\26\6\0"+
    "\1\26\22\0\1\26\5\0\25\26\1\163\3\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\164\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\23\26\1\165\5\26\6\0"+
    "\1\26\22\0\1\26\5\0\24\26\1\166\4\26\6\0"+
    "\1\26\22\0\1\26\5\0\4\26\1\167\24\26\6\0"+
    "\1\26\22\0\1\26\5\0\16\26\1\170\12\26\6\0"+
    "\1\26\22\0\1\26\5\0\3\26\1\171\25\26\6\0"+
    "\1\26\22\0\1\26\5\0\13\26\1\172\15\26\6\0"+
    "\1\26\22\0\1\26\5\0\23\26\1\173\5\26\6\0"+
    "\1\26\22\0\1\26\5\0\12\26\1\174\16\26\6\0"+
    "\1\26\22\0\1\26\5\0\16\26\1\175\12\26\6\0"+
    "\1\26\22\0\1\26\5\0\24\26\1\176\4\26\6\0"+
    "\1\26\22\0\1\26\5\0\15\26\1\177\13\26\6\0"+
    "\1\26\22\0\1\26\5\0\13\26\1\200\15\26\6\0"+
    "\1\26\2\0\4\201\14\0\1\26\5\0\31\26\5\0"+
    "\1\201\1\26\22\0\1\26\5\0\10\26\1\202\20\26"+
    "\6\0\1\26\22\0\1\26\5\0\1\203\30\26\6\0"+
    "\1\26\22\0\1\26\5\0\15\26\1\204\13\26\6\0"+
    "\1\26\22\0\1\26\5\0\2\26\1\205\26\26\6\0"+
    "\1\26\22\0\1\26\5\0\13\26\1\206\15\26\6\0"+
    "\1\26\22\0\1\26\5\0\21\26\1\207\7\26\6\0"+
    "\1\26\22\0\1\26\5\0\4\26\1\210\24\26\6\0"+
    "\1\26\22\0\1\26\5\0\4\26\1\211\24\26\6\0"+
    "\1\26\22\0\1\26\5\0\13\26\1\212\15\26\6\0"+
    "\1\26\22\0\1\26\5\0\13\26\1\213\15\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\214\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\4\26\1\215\24\26\6\0"+
    "\1\26\2\0\4\201\32\0\1\216\25\0\1\201\23\0"+
    "\1\26\5\0\2\26\1\217\26\26\6\0\1\26\22\0"+
    "\1\26\5\0\13\26\1\220\15\26\6\0\1\26\22\0"+
    "\1\26\5\0\6\26\1\221\22\26\6\0\1\26\22\0"+
    "\1\26\5\0\7\26\1\222\21\26\6\0\1\26\22\0"+
    "\1\26\5\0\16\26\1\223\12\26\6\0\1\26\22\0"+
    "\1\26\5\0\4\26\1\224\24\26\6\0\1\26\22\0"+
    "\1\26\5\0\4\26\1\225\24\26\6\0\1\26\22\0"+
    "\1\26\5\0\23\26\1\226\5\26\6\0\1\26\22\0"+
    "\1\26\5\0\21\26\1\227\7\26\6\0\1\26\35\0"+
    "\1\230\54\0\1\26\5\0\1\231\30\26\6\0\1\26"+
    "\22\0\1\26\5\0\16\26\1\232\12\26\6\0\1\26"+
    "\22\0\1\26\5\0\27\26\1\233\1\234\6\0\1\26"+
    "\22\0\1\26\5\0\22\26\1\235\6\26\6\0\1\26"+
    "\22\0\1\26\5\0\6\26\1\236\22\26\6\0\1\26"+
    "\22\0\1\26\5\0\1\26\1\237\15\26\1\240\11\26"+
    "\6\0\1\26\22\0\1\26\5\0\21\26\1\241\7\26"+
    "\6\0\1\26\22\0\1\26\5\0\13\26\1\242\15\26"+
    "\6\0\1\26\22\0\1\26\5\0\1\243\30\26\6\0"+
    "\1\26\22\0\1\26\5\0\10\26\1\244\20\26\6\0"+
    "\1\26\22\0\1\26\5\0\16\26\1\245\12\26\6\0"+
    "\1\26\22\0\1\26\5\0\21\26\1\246\7\26\6\0"+
    "\1\26\22\0\1\26\5\0\4\26\1\247\24\26\6\0"+
    "\1\26\22\0\1\26\5\0\1\26\1\250\27\26\6\0"+
    "\1\26\22\0\1\26\5\0\21\26\1\251\7\26\6\0"+
    "\1\26\22\0\1\26\5\0\1\252\30\26\6\0\1\26"+
    "\22\0\1\26\5\0\1\253\30\26\6\0\1\26\22\0"+
    "\1\26\5\0\13\26\1\254\15\26\6\0\1\26\22\0"+
    "\1\26\5\0\22\26\1\255\6\26\6\0\1\26\22\0"+
    "\1\26\5\0\4\26\1\256\24\26\6\0\1\26\22\0"+
    "\1\26\5\0\22\26\1\257\6\26\6\0\1\26\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6944];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\7\11\2\1\2\11"+
    "\21\1\3\11\1\1\1\11\1\1\1\11\1\0\2\11"+
    "\1\0\1\1\1\0\3\11\30\1\1\11\1\0\63\1"+
    "\1\0\14\1\1\0\11\1\1\11\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico: " + yytext() + " | Fila1" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 62: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 63: break;
          case 3:
            { return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 4:
            { return new Symbol(sym.DOLLAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 5:
            { return new Symbol(sym.PARENTESIS_O, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 6:
            { return new Symbol(sym.PARENTESIS_C, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 7:
            { return new Symbol(sym.BY, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 8:
            { return new Symbol(sym.PLUS, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 9:
            { return new Symbol(sym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 10:
            { return new Symbol(sym.LESS, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 11:
            { return new Symbol(sym.DOT, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 12:
            { return new Symbol(sym.DIVIDED, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 13:
            { return new Symbol(sym.ENTERO, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 14:
            { return new Symbol(sym.COLON, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 15:
            { return new Symbol(sym.SEMICOLON, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 16:
            { return new Symbol(sym.MINOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 17:
            { return new Symbol(sym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 18:
            { return new Symbol(sym.GREATER, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 19:
            { return new Symbol(sym.VARIABLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 20:
            { return new Symbol(sym.BRACKET_O, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 21:
            { return new Symbol(sym.BRACKET_C, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 22:
            { return new Symbol(sym.CURLY_O, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 23:
            { return new Symbol(sym.CURLY_C, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 24:
            { return new Symbol(sym.DIFERENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 25:
            { return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 26:
            { return new Symbol(sym.RAND, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 27:
            { 
            }
          // fall through
          case 88: break;
          case 28:
            { return new Symbol(sym.MINOREQUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 29:
            { return new Symbol(sym.EQUALEQUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 30:
            { return new Symbol(sym.GREATEREQUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 31:
            { return new Symbol(sym.RDOWHILE, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 32:
            { return new Symbol(sym.RIF, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 33:
            { return new Symbol(sym.ROR, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 34:
            { return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 35:
            { return new Symbol(sym.RFOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 36:
            { return new Symbol(sym.RINT, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 37:
            { return new Symbol(sym.RBOOL, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 38:
            { return new Symbol(sym.RCASE, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 39:
            { return new Symbol(sym.RCHAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 40:
            { return new Symbol(sym.REJEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 41:
            { return new Symbol(sym.RELSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 42:
            { return new Symbol(sym.RMAIN, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 43:
            { return new Symbol(sym.TRUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 44:
            { return new Symbol(sym.RVOID, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 45:
            { return new Symbol(sym.BREAK, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          case 46:
            { return new Symbol(sym.RWHILE, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 47:
            { return new Symbol(sym.RWRITE, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          case 48:
            { return new Symbol(sym.RDOUBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 109: break;
          case 49:
            { return new Symbol(sym.RSTRING, yycolumn, yyline, yytext());
            }
          // fall through
          case 110: break;
          case 50:
            { return new Symbol(sym.RSWITCH, yycolumn, yyline, yytext());
            }
          // fall through
          case 111: break;
          case 51:
            { return new Symbol(sym.RTITULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 112: break;
          case 52:
            { return new Symbol(sym.RCONSOLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 113: break;
          case 53:
            { return new Symbol(sym.RDEFAULT, yycolumn, yyline, yytext());
            }
          // fall through
          case 114: break;
          case 54:
            { return new Symbol(sym.RELIF, yycolumn, yyline, yytext());
            }
          // fall through
          case 115: break;
          case 55:
            { return new Symbol(sym.RTITULOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 116: break;
          case 56:
            { return new Symbol(sym.RTITULOY, yycolumn, yyline, yytext());
            }
          // fall through
          case 117: break;
          case 57:
            { return new Symbol(sym.RVALORES, yycolumn, yyline, yytext());
            }
          // fall through
          case 118: break;
          case 58:
            { return new Symbol(sym.RNEWVAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 119: break;
          case 59:
            { return new Symbol(sym.RPIE, yycolumn, yyline, yytext());
            }
          // fall through
          case 120: break;
          case 60:
            { return new Symbol(sym.RBARRAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 121: break;
          case 61:
            { return new Symbol(sym.RGLOBALES, yycolumn, yyline, yytext());
            }
          // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
